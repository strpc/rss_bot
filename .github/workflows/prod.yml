name: deploy to production
on:
  push:
    tags:
      - '*'


jobs:
  build_and_push:
    name: build and push images.
    runs-on: ubuntu-latest

    env:
      PLATFORM: linux/arm/v7

    steps:
      - name: Checkout code.
        uses: actions/checkout@v2

      - name: Set env.
        run: |
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "VERSION=${{ env.VERSION }}"

      - uses: rlespinasse/github-slug-action@3.5.1
      - name: Set up QEMU.
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Login to GitHub Package Registry.
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login "${{ secrets.REGISTRY_HOST }}" -u "${{ secrets.REGISTRY_USER }}" --password-stdin

      - name: Pulling images for use cache.
        run: |
          docker pull -a --platform $PLATFORM ${{ secrets.REGISTRY_HOST }}/rss_bot_admin || true
          docker pull -a --platform $PLATFORM ${{ secrets.REGISTRY_HOST }}/rss_bot_backend || true
          docker pull -a --platform $PLATFORM ${{ secrets.REGISTRY_HOST }}/rss_bot_worker || true

      - name: build admin image.
        run: |
          docker build --platform $PLATFORM \
          -f ./admin/docker/Dockerfile \
          -t ${{ secrets.REGISTRY_HOST }}/rss_bot_admin:${{ env.VERSION }} \
          ./admin/

      - name: build backend image.
        run: |
          docker build --platform $PLATFORM \
          -f ./backend/docker/backend.dockerfile \
          -t ${{ secrets.REGISTRY_HOST }}/rss_bot_backend:${{ env.VERSION }} \
          ./backend/

      - name: build worker image.
        run: |
          docker build --platform $PLATFORM \
          -f backend/docker/worker.dockerfile \
          -t ${{ secrets.REGISTRY_HOST }}/rss_bot_worker:${{ env.VERSION }} \
          ./backend/

      - name: push admin image.
        run: docker push ${{ secrets.REGISTRY_HOST }}/rss_bot_admin:${{ env.VERSION }}

      - name: push backend image.
        run: docker push ${{ secrets.REGISTRY_HOST }}/rss_bot_backend:${{ env.VERSION }}

      - name: push worker image.
        run: docker push ${{ secrets.REGISTRY_HOST }}/rss_bot_worker:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set env
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: rlespinasse/github-slug-action@3.5.1

      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export VERSION="${{ env.VERSION }}"
            export DEBUG="${{ secrets.DEBUG }}"
            export NGINX_PORT="${{ secrets.NGINX_PORT }}"
            export SECRET_KEY="${{ secrets.SECRET_KEY }}"
            export LOG_LEVEL="${{ secrets.LOG_LEVEL }}"
            export DATABASE_DSN="${{ secrets.DATABASE_DSN }}"
            export CELERY_BROKER="${{ secrets.CELERY_BROKER }}"
            export CELERY_HOUR_BEAT_INTERVAL="${{ secrets.CELERY_HOUR_BEAT_INTERVAL }}"
            export CELERY_MINUTE_BEAT_INTERVAL="${{ secrets.CELERY_MINUTE_BEAT_INTERVAL }}"
            export TELEGRAM_TOKEN="${{ secrets.TELEGRAM_TOKEN }}"
            export EASY_NOTIFYER_TOKEN="${{ secrets.EASY_NOTIFYER_TOKEN }}"
            export EASY_NOTIFYER_CHAT_ID="${{ secrets.EASY_NOTIFYER_CHAT_ID }}"
            export EASY_NOTIFYER_SERVICE_NAME="${{ secrets.EASY_NOTIFYER_SERVICE_NAME }}"
            export POCKET_CONSUMER_KEY="${{ secrets.POCKET_CONSUMER_KEY }}"
            export POCKET_REDIRECT_URL="${{ secrets.POCKET_REDIRECT_URL }}"
            export LIMIT_LOAD_FEED="${{ secrets.LIMIT_LOAD_FEED }}"
            export LIMIT_TITLE_MESSAGE="${{ secrets.LIMIT_TITLE_MESSAGE }}"
            export LIMIT_TEXT_MESSAGE="${{ secrets.LIMIT_TEXT_MESSAGE }}"
            export LIMIT_COUNT_FEED_USER="${{ secrets.LIMIT_COUNT_FEED_USER }}"

            cd ${{ secrets.PROJECT_DIR }}
            git pull
            echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login localhost -u "${{ secrets.REGISTRY_USER }}" --password-stdin
            export PRIVATE_REGISTRY="localhost/"
            export COMPOSE_HTTP_TIMEOUT=300
            docker-compose pull
            docker-compose down --remove-orphans -v
            docker-compose -f docker-compose.yml up -d

      - name: send message to telegram
        uses: appleboy/telegram-action@master
        with:
          token: ${{ secrets.EASY_NOTIFYER_TOKEN }}
          to: ${{ secrets.EASY_NOTIFYER_CHAT_ID }}
          format: html
          message: |
            Production: <a href="${{ github.SERVER_URL }}/${{ github.REPOSITORY }}">${{ env.GITHUB_REPOSITORY_NAME_PART }}</a> was updated to <a href="${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/tree/${{ env.GITHUB_REF_SLUG }}">${{ env.GITHUB_REF_SLUG }}</a>:<a href="${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/commit/${{ github.SHA }}">${{ env.GITHUB_SHA_SHORT }}</a>.
